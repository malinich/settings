<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/Envs/ver_second/Lib/site-packages/django/utils/six.py" timestamp="1513764828520">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="/Dummy.txt" timestamp="1513768433659">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/wli_router/app.py" timestamp="1513630363078">
        <mark key="[" line="75" column="40" />
        <mark key="]" line="75" column="51" />
        <mark key="." line="23" column="0" />
      </file>
      <file name="/Python Console" timestamp="1513770893076">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/consoles/db/fa88f1db-ec80-43aa-acdb-53ff01cd35ce/console.sql" timestamp="1513769269194">
        <mark key="[" line="2" column="27" />
        <mark key="]" line="2" column="28" />
        <mark key="." line="2" column="0" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/wli_router/route/models.py" timestamp="1513630426182">
        <mark key="[" line="38" column="0" />
      </file>
      <file name="/Django Console" timestamp="1513767194166">
        <mark key="[" line="0" column="20" />
        <mark key="]" line="0" column="20" />
        <mark key="." line="0" column="20" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/wli_router/route/handlers.py" timestamp="1513630554569">
        <mark key="[" line="8" column="10" />
      </file>
      <file name="C:/dev/py/diff/DiffApp/core/client.py" timestamp="1513768432348" />
      <file name="C:/dev/py/diff/DiffApp/clients/mssp/service.py" timestamp="1513769765474" />
      <file name="/dummy.sql" timestamp="1513765664183">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="C:/dev/py/diff/DiffApp/clients/mssp/client.py" timestamp="1513772461195">
        <mark key="'" line="227" column="53" />
        <mark key="[" line="220" column="23" />
        <mark key="]" line="257" column="0" />
        <mark key="^" line="221" column="0" />
        <mark key="." line="257" column="0" />
      </file>
      <file name="C:/dev/py/diff/Diff/settings/dev_igor.py" timestamp="1513770742156">
        <mark key="[" line="362" column="26" />
        <mark key="]" line="362" column="26" />
        <mark key="." line="362" column="26" />
        <mark key="^" line="362" column="44" />
      </file>
    </filemarks>
    <jumps>
      <jump line="9" column="37" filename="$USER_HOME$/PycharmProjects/wli_router/app.py" />
      <jump line="86" column="4" filename="$USER_HOME$/PycharmProjects/wli_router/app.py" />
      <jump line="0" column="0" filename="$USER_HOME$/PycharmProjects/wli_router/app.py" />
      <jump line="0" column="0" filename="$USER_HOME$/Envs/ver_second/Lib/site-packages/django/utils/six.py" />
      <jump line="469" column="18" filename="C:/dev/py/diff/DiffApp/clients/mssp/client.py" />
      <jump line="0" column="0" filename="C:/dev/py/diff/DiffApp/clients/mssp/client.py" />
      <jump line="209" column="80" filename="C:/dev/py/diff/DiffApp/clients/mssp/client.py" />
      <jump line="203" column="77" filename="C:/dev/py/diff/DiffApp/clients/mssp/client.py" />
      <jump line="217" column="35" filename="C:/dev/py/diff/DiffApp/clients/mssp/client.py" />
      <jump line="226" column="21" filename="C:/dev/py/diff/DiffApp/clients/mssp/client.py" />
      <jump line="227" column="53" filename="C:/dev/py/diff/DiffApp/clients/mssp/client.py" />
    </jumps>
    <registers>
      <register name="&quot;" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="-" type="4">
        <text>return</text>
      </register>
      <register name="/" type="4">
        <text>request, args in self._list_permission_requests_generator():</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">REVMRVRFIEZST00gbXNzcF9tZW1iZXJzaGlwOwo=</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="2" type="4">
        <text encoding="base64">ICAgICAgICAgICAgbG9nZ2VyLmluZm8oIlxuXG5cbkNoaW5naXogSEVMTE9cbiIpCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCIjIyMjc3Vic2l0ZXMgZm9yIGhvc3Q6ICVzIGZvciBwYXRoOiAlcyAjIyMiICUgKGhvc3QsIHBhdGgpKQogICAgICAgICAgICBsb2dnZXIuaW5mbyhsaXN0KHNlbGYuX2dldF9zdWJzaXRlX3Blcm1pc3Npb25zKCkpKQogICAgICAgICAgICBsb2dnZXIuaW5mbygiIyMjIyBmaW5pc2ggbG9nICMjIyMiKQ==</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">ICAgICAgICAgICAgeWllbGQgc2VsZi5fc2Vzc2lvbi5nZXQoTElTVF9QRVJNSVNTSU9OU19VUkwuZm9ybWF0KGxvZ2luPXVybGxpYi5xdW90ZV9wbHVzKGFyZ3NbJ2xvZ2luJ10uZW5jb2RlKCJjcDEyNTEiKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw9YXJnc1sndXJsJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBndWlkPWFyZ3MucG9wKCdndWlkJykpLCB2ZXJpZnk9RmFsc2UpLCBhcmdzVgo=</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">IyBjb2Rpbmc9dXRmLTgKZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCB1bmljb2RlX2xpdGVyYWxzCmltcG9ydCBsb2dnaW5nCmltcG9ydCB1cmxsaWIKCmltcG9ydCBpdGVydG9vbHMKZnJvbSBkamFuZ28udXRpbHMudGltZXpvbmUgaW1wb3J0IG5vdwpmcm9tIGRqYW5nby51dGlscyBpbXBvcnQgc2l4CmZyb20gY29uY3VycmVudC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3IKZnJvbSByZXF1ZXN0cyBpbXBvcnQgU2Vzc2lvbgpmcm9tIHJlcXVlc3RzLmFkYXB0ZXJzIGltcG9ydCBIVFRQQWRhcHRlcgpmcm9tIHJlcXVlc3RzLnBhY2thZ2VzLnVybGxpYjMgaW1wb3J0IFJldHJ5CmZyb20gcmVxdWVzdHMucGFja2FnZXMudXJsbGliMyBpbXBvcnQgZGlzYWJsZV93YXJuaW5ncwpmcm9tIHJlcXVlc3RzX2Z1dHVyZXMuc2Vzc2lvbnMgaW1wb3J0IEZ1dHVyZXNTZXNzaW9uCmZyb20gcmVxdWVzdHNfbnRsbSBpbXBvcnQgSHR0cE50bG1BdXRoCgpmcm9tIERpZmZBcHAuY29yZS5jbGllbnQgaW1wb3J0IEJhc2VDbGllbnQKCmxvZ2dlciA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKF9fbmFtZV9fKQpkaXNhYmxlX3dhcm5pbmdzKCkKCkdST1VQU19VUkwgPSAne3VybH0vX2FwaS9XZWIvc2l0ZWdyb3VwcycKVVNFUlNfVVJMID0gJ3t1cmx9L19hcGkvV2ViL3NpdGV1c2VycycKU1VCU0lURVNfVVJMID0gJ3t1cmx9L19hcGkvV2ViL3dlYnMnClNVQlNJVEVfUEVSTUlTU0lPTlNfVVJMID0gInt1cmx9L19hcGkvV2ViL2dldHVzZXJlZmZlY3RpdmVwZXJtaXNzaW9ucyhAdXNlcik/QHVzZXI9J3tsb2dpbn0nIgpMSVNUU19VUkwgPSAne3VybH0vX2FwaS9XZWIvbGlzdHMnCkxJU1RfVVJMID0gInt1cmx9L19hcGkvV2ViL2xpc3RzKGd1aWQne2d1aWR9JykiCkxJU1RfUEVSTUlTU0lPTlNfVVJMID0gInt1cmx9L19hcGkvV2ViL2xpc3RzKGd1aWQne2d1aWR9JykvZ2V0dXNlcmVmZmVjdGl2ZXBlcm1pc3Npb25zKEB1c2VyKT9AdXNlcj0ne2xvZ2lufSciCgoKY2xhc3MgU2hhcmVQb2ludENsaWVudChCYXNlQ2xpZW50KToKICAgIGxhYmVsID0gJ21zc3AnCiAgICBkaXNwbGF5X25hbWUgPSB1J9Hl8OLl8CBTaGFyZVBvaW50JwogICAgZGlzcGxheV9uYW1lX3BsdXJhbCA9IHUn0eXw4uXw+yBTaGFyZVBvaW50JwogICAgX3Nlc3Npb24gPSBOb25lCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGNvbm5lY3Rpb25fcGFyYW1zPU5vbmUsICphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgc2VsZi51cmwgPSBOb25lCiAgICAgICAgc2VsZi51c2VybmFtZSA9IE5vbmUKICAgICAgICBzZWxmLnBhc3N3b3JkID0gTm9uZQogICAgICAgIHN1cGVyKFNoYXJlUG9pbnRDbGllbnQsIHNlbGYpLl9faW5pdF9fKGNvbm5lY3Rpb25fcGFyYW1zLCAqYXJncywgKiprd2FyZ3MpCiAgICAgICAgYXNzZXJ0IHNlbGYudXJsLCAndXJsIGlzIHJlcXVpcmVkJwogICAgICAgIGFzc2VydCBzZWxmLnVzZXJuYW1lLCAndXNlcm5hbWUgaXMgcmVxdWlyZWQnCiAgICAgICAgYXNzZXJ0IHNlbGYucGFzc3dvcmQsICdwYXNzd29yZCBpcyByZXF1aXJlZCcKCiAgICBkZWYgY29ubmVjdChzZWxmKToKICAgICAgICBpZiBub3Qgc2VsZi5fc2Vzc2lvbjoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2Vzc2lvbiA9IFNlc3Npb24oKQogICAgICAgICAgICAgICAgYXV0aCA9IEh0dHBOdGxtQXV0aChzZWxmLnVzZXJuYW1lLCBzZWxmLnBhc3N3b3JkKQogICAgICAgICAgICAgICAgc2Vzc2lvbi5hdXRoID0gYXV0aAogICAgICAgICAgICAgICAgc2Vzc2lvbi5oZWFkZXJzID0geydhY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbjsgb2RhdGE9dmVyYm9zZSd9CiAgICAgICAgICAgICAgICByZXRyaWVzID0gUmV0cnkodG90YWw9NSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrb2ZmX2ZhY3Rvcj0wLjEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzX2ZvcmNlbGlzdD1bNTAwLCA1MDIsIDUwMywgNTA0XSkKICAgICAgICAgICAgICAgIHNlc3Npb24ubW91bnQoImh0dHA6Ly8iLCBIVFRQQWRhcHRlcihtYXhfcmV0cmllcz1yZXRyaWVzKSkKICAgICAgICAgICAgICAgIHNlc3Npb24ubW91bnQoImh0dHBzOi8vIiwgSFRUUEFkYXB0ZXIobWF4X3JldHJpZXM9cmV0cmllcykpCiAgICAgICAgICAgICAgICBzZWxmLl9zZXNzaW9uID0gRnV0dXJlc1Nlc3Npb24oZXhlY3V0b3I9VGhyZWFkUG9vbEV4ZWN1dG9yKG1heF93b3JrZXJzPTEpLCBzZXNzaW9uPXNlc3Npb24pCiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHNlbGYuX3Nlc3Npb24uZ2V0KHNlbGYudXJsLCB2ZXJpZnk9RmFsc2UpLnJlc3VsdCgpCiAgICAgICAgICAgICAgICBhc3NlcnQgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwLCAnc3RhdHVzIGNvZGUgLSAlcycgJSByZXNwb25zZS5zdGF0dXNfY29kZQogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ0Nvbm5lY3Rpb24gdG8gc2hhcmVQb2ludCBhdCAiJXMiIGVzdGFibGlzaGVkJyAlIHNlbGYudXJsKQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oJ0NhblwndCBjb25uZWN0IHRvIHNoYXJlUG9pbnQgYXQgIiVzIjogJXMnICUgKHNlbGYudXJsLCBlKSkKCiAgICBkZWYgZGlzY29ubmVjdChzZWxmKToKICAgICAgICBzZWxmLl9zZXNzaW9uID0gTm9uZQoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBfcmVzdWx0cyhyZXNwb25zZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpWydkJ11bJ3Jlc3VsdHMnXQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbG9nZ2VyLmV4Y2VwdGlvbihlKQogICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oJ0Vycm9yIHBhcnNpbmcgcmVzcG9uc2UgcmVzdWx0czogJXMuIFJlc3BvbnNlOiAlcycgJSAoZSwgcmVzcG9uc2UudGV4dCkpCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIF9nZXRfcGVybWlzc2lvbnMocmVzcG9uc2UpOgogICAgICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgICAgICAgICAgbG93ID0gaW50KHJlc3BvbnNlLmpzb24oKVsnZCddWydHZXRVc2VyRWZmZWN0aXZlUGVybWlzc2lvbnMnXVsnTG93J10pCiAgICAgICAgICAgIGhpZ2ggPSBpbnQocmVzcG9uc2UuanNvbigpWydkJ11bJ0dldFVzZXJFZmZlY3RpdmVQZXJtaXNzaW9ucyddWydIaWdoJ10pCiAgICAgICAgICAgIHBlcm1pc3Npb25zID0gKGhpZ2ggPDwgMzIpICsgbG93CiAgICAgICAgICAgIHJldHVybiBwZXJtaXNzaW9ucwogICAgICAgIGVsaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gNDAxOgogICAgICAgICAgICBsb2dnZXIuZXJyb3IoIlVuYXV0aG9yaXplZDogJXMiICUgcmVzcG9uc2UudGV4dCkKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgX3RyaW1fdXJsKHVybCk6CiAgICAgICAgcmV0dXJuIHVybC5zcGxpdCgnOi8vJylbMV0KCiAgICBkZWYgX2Vuc3VyZV9yZXF1ZXN0KHNlbGYsIHVybCk6CiAgICAgICAgcmVxdWVzdCA9IHNlbGYuX3Nlc3Npb24uZ2V0KHVybCwgdmVyaWZ5PUZhbHNlKQogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdC5yZXN1bHQoKQogICAgICAgIGFzc2VydCByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDAsICdzdGF0dXMgY29kZSAtICVzJyAlIHJlc3BvbnNlLnN0YXR1c19jb2RlCiAgICAgICAgcmV0dXJuIHJlc3BvbnNlCgogICAgZGVmIGdldF9yb2xlcyhzZWxmLCBncm91cF9maWx0ZXI9Tm9uZSwgKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJlc3BvbnNlID0gc2VsZi5fZW5zdXJlX3JlcXVlc3QoR1JPVVBTX1VSTC5mb3JtYXQodXJsPXNlbGYudXJsKSkKICAgICAgICAgICAgZ3JvdXBzID0gc2VsZi5fcmVzdWx0cyhyZXNwb25zZSkKICAgICAgICAgICAgcmV0dXJuIFt7CiAgICAgICAgICAgICAgICAidWlkIjogaXRlbVsiSWQiXSwKICAgICAgICAgICAgICAgICduYW1lJzogc2VsZi5fdHJpbV9wcmVmaXgoaXRlbVsnTG9naW5OYW1lJ10pLAogICAgICAgICAgICAgICAgJ2Rpc3BsYXlfbmFtZSc6IGl0ZW1bJ1RpdGxlJ10sCiAgICAgICAgICAgIH0gZm9yIGl0ZW0gaW4gZ3JvdXBzXQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbG9nZ2VyLmV4Y2VwdGlvbihlKQogICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oJ0Vycm9yIHdoaWxlIGdldHRpbmcgZ3JvdXAgbGlzdDogJXMnICUgZSkKCiAgICBkZWYgZ2V0X2NoaWxkcmVuX25vZGVzKHNlbGYsIHVybCk6CiAgICAgICAgcmV0dXJuIFtdCgogICAgZGVmIGdldF9tZW1iZXJzaGlwcyhzZWxmLCAqYXJncywgKiprd2FyZ3MpOgogICAgICAgIHJlc3VsdCA9IHt9CiAgICAgICAgdHJ5OgogICAgICAgICAgICB1c2VycyA9IHNlbGYuX2dldF91c2VycygqYXJncywgKiprd2FyZ3MpCiAgICAgICAgICAgIGZvciB1c2VyIGluIHVzZXJzOgogICAgICAgICAgICAgICAgcmVzdWx0LnVwZGF0ZSh7dXNlclsnSWQnXTogewogICAgICAgICAgICAgICAgICAgICd1aWQnOiB1c2VyWydJZCddLAogICAgICAgICAgICAgICAgICAgICduYW1lJzogc2VsZi5fdHJpbV9wcmVmaXgodXNlclsnTG9naW5OYW1lJ10pLAogICAgICAgICAgICAgICAgICAgICdkaXNwbGF5X25hbWUnOiB1c2VyWydUaXRsZSddLAogICAgICAgICAgICAgICAgICAgICdtZW1iZXJPZic6IFtzZWxmLl90cmltX3ByZWZpeChncm91cFsnSWQnXSkgZm9yIGdyb3VwIGluIHNlbGYuX3Jlc3VsdHMoc2VsZi5fZW5zdXJlX3JlcXVlc3QodXNlclsnR3JvdXBzJ11bJ19fZGVmZXJyZWQnXVsndXJpJ10pKV0KICAgICAgICAgICAgICAgIH19KQogICAgICAgICAgICByZXR1cm4gcmVzdWx0CiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBsb2dnZXIuZXhjZXB0aW9uKGUpCiAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbignRXJyb3Igd2hpbGUgZ2V0dGluZyBtZW1iZXJzaGlwIGxpc3Q6ICVzJyAlIGUpCgogICAgZGVmIGdldF9yb2xlc19tZW1iZXJzaGlwKHNlbGYsIHVwZGF0ZV9jYWNoZT1GYWxzZSk6CiAgICAgICAgcGFzcwoKICAgIGRlZiBnZXRfbWVtYmVyc2hpcF9kZXRhaWxzKHNlbGYsIHN1YmplY3Rfa2V5LCAqYXJncywgKiprd2FyZ3MpOgogICAgICAgIHBhc3MKCiAgICBkZWYgZ2V0X2FjZXMoc2VsZiwgaG9zdCwgbm9kZV90eXBlLCBwYXRoKToKICAgICAgICBwYXNzCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIF90cmltX3ByZWZpeCh1c2VybmFtZSk6CiAgICAgICAgIyBpZiAnfCcgaW4gdXNlcm5hbWU6CiAgICAgICAgIyAgICAgdXNlcm5hbWUgPSB1c2VybmFtZS5zcGxpdCgnfCcpWzFdCiAgICAgICAgcmV0dXJuIHVzZXJuYW1lCgogICAgZGVmIF9nZXRfdXNlcnMoc2VsZiwgdXNlcl9maWx0ZXI9Tm9uZSwgKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJlc3BvbnNlID0gc2VsZi5fZW5zdXJlX3JlcXVlc3QoVVNFUlNfVVJMLmZvcm1hdCh1cmw9c2VsZi51cmwpKQogICAgICAgICAgICByZXR1cm4gc2VsZi5fcmVzdWx0cyhyZXNwb25zZSkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5leGNlcHRpb24oZSkKICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCdFcnJvciB3aGlsZSBnZXR0aW5nIHVzZXIgbGlzdDogJXMnICUgZSkKCiAgICBkZWYgZ2V0X3VzZXJzKHNlbGYsIHVzZXJfZmlsdGVyPU5vbmUsICphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgcmV0dXJuIFt7CiAgICAgICAgICAgICJ1aWQiOiBzaXgudGV4dF90eXBlKHVzZXJbIklkIl0pLAogICAgICAgICAgICAnbmFtZSc6IHNpeC50ZXh0X3R5cGUoc2VsZi5fdHJpbV9wcmVmaXgodXNlclsnTG9naW5OYW1lJ10pKSwKICAgICAgICAgICAgJ2Rpc3BsYXlfbmFtZSc6IHNpeC50ZXh0X3R5cGUodXNlclsnVGl0bGUnXSksCiAgICAgICAgICAgICdtZW1iZXJPZic6IFtzaXgudGV4dF90eXBlKHNlbGYuX3RyaW1fcHJlZml4KGdyb3VwWydJZCddKSkgZm9yIGdyb3VwIGluIHNlbGYuX3Jlc3VsdHMoc2VsZi5fZW5zdXJlX3JlcXVlc3QodXNlclsnR3JvdXBzJ11bJ19fZGVmZXJyZWQnXVsndXJpJ10pKV0KICAgICAgICB9IGZvciB1c2VyIGluIHNlbGYuX2dldF91c2Vycyh1c2VyX2ZpbHRlciwgKmFyZ3MsICoqa3dhcmdzKV0KCiAgICBkZWYgX2dldF9zdWJzaXRlcyhzZWxmLCB1cmwpOgogICAgICAgIHlpZWxkIHVybAogICAgICAgIHRyeToKICAgICAgICAgICAgcmVzcG9uc2UgPSBzZWxmLl9lbnN1cmVfcmVxdWVzdChTVUJTSVRFU19VUkwuZm9ybWF0KHVybD11cmwpKQogICAgICAgICAgICByZXN1bHRzID0gc2VsZi5fcmVzdWx0cyhyZXNwb25zZSkKICAgICAgICAgICAgZm9yIG5vZGUgaW4gcmVzdWx0czoKICAgICAgICAgICAgICAgIGZvciB1cmwgaW4gc2VsZi5fZ2V0X3N1YnNpdGVzKG5vZGVbJ1VybCddKToKICAgICAgICAgICAgICAgICAgICB5aWVsZCB1cmwKCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBsb2dnZXIuZXhjZXB0aW9uKGUpCiAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbignRXJyb3Igd2hpbGUgZ2V0dGluZyBzdWJzaXRlcyBsaXN0OiAlczsgVVJMOiAlcycgJSAoZSwgU1VCU0lURVNfVVJMLmZvcm1hdCh1cmw9dXJsKSkpCgogICAgZGVmIF9nZXRfbGlzdHNfZGV0YWlscyhzZWxmLCBzdWJzaXRlX3VybCk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXF1ZXN0ID0gc2VsZi5fZW5zdXJlX3JlcXVlc3QoTElTVFNfVVJMLmZvcm1hdCh1cmw9c3Vic2l0ZV91cmwpKQogICAgICAgICAgICByZXN1bHRzID0gc2VsZi5fcmVzdWx0cyhyZXF1ZXN0KQogICAgICAgICAgICByZXR1cm4gWyhzaXgudGV4dF90eXBlKHJlc3VsdFsnSWQnXSksIHNpeC50ZXh0X3R5cGUocmVzdWx0WydUaXRsZSddKSkgZm9yIHJlc3VsdCBpbiByZXN1bHRzXQoKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5leGNlcHRpb24oZSkKICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCdFcnJvciB3aGlsZSBnZXR0aW5nIGxpc3RzIGxpc3Q6ICVzJyAlIGUpCgogICAgZGVmIF9saXN0X3Blcm1pc3Npb25fYXJnc19nZW5lcmF0b3Ioc2VsZik6CiAgICAgICAgZm9yIHN1YnNpdGUgaW4gc2VsZi5fZ2V0X3N1YnNpdGVzKHNlbGYudXJsKToKICAgICAgICAgICAgbGlzdF9pZHMgPSBzZWxmLl9nZXRfbGlzdHNfZGV0YWlscyhzdWJzaXRlKQogICAgICAgICAgICBmb3IgdXNlciBpbiBzZWxmLmdldF91c2VycygpOgogICAgICAgICAgICAgICAgZm9yIGd1aWQsIHRpdGxlIGluIGxpc3RfaWRzOgogICAgICAgICAgICAgICAgICAgIHlpZWxkIHsndXJsJzogc3Vic2l0ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2d1aWQnOiBzaXgudGV4dF90eXBlKGd1aWQpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAnbG9naW4nOiBzaXgudGV4dF90eXBlKHVzZXJbJ25hbWUnXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aXRsZSc6IHRpdGxlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAndWlkJzogc2l4LnRleHRfdHlwZSh1c2VyWyd1aWQnXSl9CgogICAgZGVmIF9zdWJzaXRlX3Blcm1pc3Npb25fYXJnc19nZW5lcmF0b3Ioc2VsZik6CiAgICAgICAgZm9yIHN1YnNpdGUgaW4gc2VsZi5fZ2V0X3N1YnNpdGVzKHNlbGYudXJsKToKICAgICAgICAgICAgZm9yIHVzZXIgaW4gc2VsZi5nZXRfdXNlcnMoKToKICAgICAgICAgICAgICAgIHlpZWxkIHsndXJsJzogc3Vic2l0ZSwgJ2xvZ2luJzogc2l4LnRleHRfdHlwZSh1c2VyWyduYW1lJ10pLCAndWlkJzogc2l4LnRleHRfdHlwZSh1c2VyWyd1aWQnXSl9CgogICAgZGVmIF9saXN0X3Blcm1pc3Npb25fcmVxdWVzdHNfZ2VuZXJhdG9yKHNlbGYpOgogICAgICAgIGZvciBhcmdzIGluIHNlbGYuX2xpc3RfcGVybWlzc2lvbl9hcmdzX2dlbmVyYXRvcigpOgogICAgICAgICAgICB5aWVsZCBzZWxmLl9zZXNzaW9uLmdldChMSVNUX1BFUk1JU1NJT05TX1VSTC5mb3JtYXQobG9naW49dXJsbGliLnF1b3RlX3BsdXMoYXJnc1snbG9naW4nXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw9YXJnc1sndXJsJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBndWlkPWFyZ3MucG9wKCdndWlkJykpLCB2ZXJpZnk9RmFsc2UpLCBhcmdzCgogICAgZGVmIF9zdWJzaXRlX3Blcm1pc3Npb25fcmVxdWVzdHNfZ2VuZXJhdG9yKHNlbGYpOgogICAgICAgIGZvciBhcmdzIGluIHNlbGYuX3N1YnNpdGVfcGVybWlzc2lvbl9hcmdzX2dlbmVyYXRvcigpOgogICAgICAgICAgICB5aWVsZCBzZWxmLl9zZXNzaW9uLmdldChTVUJTSVRFX1BFUk1JU1NJT05TX1VSTC5mb3JtYXQobG9naW49dXJsbGliLnF1b3RlX3BsdXMoYXJnc1snbG9naW4nXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw9YXJnc1sndXJsJ10pLCB2ZXJpZnk9RmFsc2UpLCBhcmdzCgogICAgZGVmIF9saXN0X3Blcm1pc3Npb25fcmVzcG9uc2VzX2dlbmVyYXRvcihzZWxmKToKICAgICAgICBmb3IgcmVxdWVzdCwgYXJncyBpbiBzZWxmLl9saXN0X3Blcm1pc3Npb25fcmVxdWVzdHNfZ2VuZXJhdG9yKCk6CiAgICAgICAgICAgIHlpZWxkIHJlcXVlc3QucmVzdWx0KCksIGFyZ3MKCiAgICBkZWYgX3N1YnNpdGVfcGVybWlzc2lvbl9yZXNwb25zZXNfZ2VuZXJhdG9yKHNlbGYpOgogICAgICAgIGZvciByZXF1ZXN0LCBhcmdzIGluIHNlbGYuX3N1YnNpdGVfcGVybWlzc2lvbl9yZXF1ZXN0c19nZW5lcmF0b3IoKToKICAgICAgICAgICAgeWllbGQgcmVxdWVzdC5yZXN1bHQoKSwgYXJncwoKICAgIGRlZiBfZ2V0X2xpc3RfcGVybWlzc2kjIGNvZGluZz11dGYtOApmcm9tIF9fZnV0dXJlX18gaW1wb3J0IHVuaWNvZGVfbGl0ZXJhbHMKaW1wb3J0IGxvZ2dpbmcKaW1wb3J0IHVybGxpYgoKaW1wb3J0IGl0ZXJ0b29scwpmcm9tIGRqYW5nby51dGlscy50aW1lem9uZSBpbXBvcnQgbm93CmZyb20gZGphbmdvLnV0aWxzIGltcG9ydCBzaXgKZnJvbSBjb25jdXJyZW50LmZ1dHVyZXMgaW1wb3J0IFRocmVhZFBvb2xFeGVjdXRvcgpmcm9tIHJlcXVlc3RzIGltcG9ydCBTZXNzaW9uCmZyb20gcmVxdWVzdHMuYWRhcHRlcnMgaW1wb3J0IEhUVFBBZGFwdGVyCmZyb20gcmVxdWVzdHMucGFja2FnZXMudXJsbGliMyBpbXBvcnQgUmV0cnkKZnJvbSByZXF1ZXN0cy5wYWNrYWdlcy51cmxsaWIzIGltcG9ydCBkaXNhYmxlX3dhcm5pbmdzCmZyb20gcmVxdWVzdHNfZnV0dXJlcy5zZXNzaW9ucyBpbXBvcnQgRnV0dXJlc1Nlc3Npb24KZnJvbSByZXF1ZXN0c19udGxtIGltcG9ydCBIdHRwTnRsbUF1dGgKCmZyb20gRGlmZkFwcC5jb3JlLmNsaWVudCBpbXBvcnQgQmFzZUNsaWVudAoKbG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIoX19uYW1lX18pCmRpc2FibGVfd2FybmluZ3MoKQoKR1JPVVBTX1VSTCA9ICd7dXJsfS9fYXBpL1dlYi9zaXRlZ3JvdXBzJwpVU0VSU19VUkwgPSAne3VybH0vX2FwaS9XZWIvc2l0ZXVzZXJzJwpTVUJTSVRFU19VUkwgPSAne3VybH0vX2FwaS9XZWIvd2VicycKU1VCU0lURV9QRVJNSVNTSU9OU19VUkwgPSAie3VybH0vX2FwaS9XZWIvZ2V0dXNlcmVmZmVjdGl2ZXBlcm1pc3Npb25zKEB1c2VyKT9AdXNlcj0ne2xvZ2lufSciCkxJU1RTX1VSTCA9ICd7dXJsfS9fYXBpL1dlYi9saXN0cycKTElTVF9VUkwgPSAie3VybH0vX2FwaS9XZWIvbGlzdHMoZ3VpZCd7Z3VpZH0nKSIKTElTVF9QRVJNSVNTSU9OU19VUkwgPSAie3VybH0vX2FwaS9XZWIvbGlzdHMoZ3VpZCd7Z3VpZH0nKS9nZXR1c2VyZWZmZWN0aXZlcGVybWlzc2lvbnMoQHVzZXIpP0B1c2VyPSd7bG9naW59JyIKCgpjbGFzcyBTaGFyZVBvaW50Q2xpZW50KEJhc2VDbGllbnQpOgogICAgbGFiZWwgPSAnbXNzcCcKICAgIGRpc3BsYXlfbmFtZSA9IHUn0eXw4uXwIFNoYXJlUG9pbnQnCiAgICBkaXNwbGF5X25hbWVfcGx1cmFsID0gdSfR5fDi5fD7IFNoYXJlUG9pbnQnCiAgICBfc2Vzc2lvbiA9IE5vbmUKCiAgICBkZWYgX19pbml0X18oc2VsZiwgY29ubmVjdGlvbl9wYXJhbXM9Tm9uZSwgKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICBzZWxmLnVybCA9IE5vbmUKICAgICAgICBzZWxmLnVzZXJuYW1lID0gTm9uZQogICAgICAgIHNlbGYucGFzc3dvcmQgPSBOb25lCiAgICAgICAgc3VwZXIoU2hhcmVQb2ludENsaWVudCwgc2VsZikuX19pbml0X18oY29ubmVjdGlvbl9wYXJhbXMsICphcmdzLCAqKmt3YXJncykKICAgICAgICBhc3NlcnQgc2VsZi51cmwsICd1cmwgaXMgcmVxdWlyZWQnCiAgICAgICAgYXNzZXJ0IHNlbGYudXNlcm5hbWUsICd1c2VybmFtZSBpcyByZXF1aXJlZCcKICAgICAgICBhc3NlcnQgc2VsZi5wYXNzd29yZCwgJ3Bhc3N3b3JkIGlzIHJlcXVpcmVkJwoKICAgIGRlZiBjb25uZWN0KHNlbGYpOgogICAgICAgIGlmIG5vdCBzZWxmLl9zZXNzaW9uOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzZXNzaW9uID0gU2Vzc2lvbigpCiAgICAgICAgICAgICAgICBhdXRoID0gSHR0cE50bG1BdXRoKHNlbGYudXNlcm5hbWUsIHNlbGYucGFzc3dvcmQpCiAgICAgICAgICAgICAgICBzZXNzaW9uLmF1dGggPSBhdXRoCiAgICAgICAgICAgICAgICBzZXNzaW9uLmhlYWRlcnMgPSB7J2FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uOyBvZGF0YT12ZXJib3NlJ30KICAgICAgICAgICAgICAgIHJldHJpZXMgPSBSZXRyeSh0b3RhbD01LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tvZmZfZmFjdG9yPTAuMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNfZm9yY2VsaXN0PVs1MDAsIDUwMiwgNTAzLCA1MDRdKQogICAgICAgICAgICAgICAgc2Vzc2lvbi5tb3VudCgiaHR0cDovLyIsIEhUVFBBZGFwdGVyKG1heF9yZXRyaWVzPXJldHJpZXMpKQogICAgICAgICAgICAgICAgc2Vzc2lvbi5tb3VudCgiaHR0cHM6Ly8iLCBIVFRQQWRhcHRlcihtYXhfcmV0cmllcz1yZXRyaWVzKSkKICAgICAgICAgICAgICAgIHNlbGYuX3Nlc3Npb24gPSBGdXR1cmVzU2Vzc2lvbihleGVjdXRvcj1UaHJlYWRQb29sRXhlY3V0b3IobWF4X3dvcmtlcnM9MSksIHNlc3Npb249c2Vzc2lvbikKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gc2VsZi5fc2Vzc2lvbi5nZXQoc2VsZi51cmwsIHZlcmlmeT1GYWxzZSkucmVzdWx0KCkKICAgICAgICAgICAgICAgIGFzc2VydCByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDAsICdzdGF0dXMgY29kZSAtICVzJyAlIHJlc3BvbnNlLnN0YXR1c19jb2RlCiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbygnQ29ubmVjdGlvbiB0byBzaGFyZVBvaW50IGF0ICIlcyIgZXN0YWJsaXNoZWQnICUgc2VsZi51cmwpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbignQ2FuXCd0IGNvbm5lY3QgdG8gc2hhcmVQb2ludCBhdCAiJXMiOiAlcycgJSAoc2VsZi51cmwsIGUpKQoKICAgIGRlZiBkaXNjb25uZWN0KHNlbGYpOgogICAgICAgIHNlbGYuX3Nlc3Npb24gPSBOb25lCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIF9yZXN1bHRzKHJlc3BvbnNlKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKClbJ2QnXVsncmVzdWx0cyddCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBsb2dnZXIuZXhjZXB0aW9uKGUpCiAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbignRXJyb3IgcGFyc2luZyByZXNwb25zZSByZXN1bHRzOiAlcy4gUmVzcG9uc2U6ICVzJyAlIChlLCByZXNwb25zZS50ZXh0KSkKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgX2dldF9wZXJtaXNzaW9ucyhyZXNwb25zZSk6CiAgICAgICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgICAgICAgICBsb3cgPSBpbnQocmVzcG9uc2UuanNvbigpWydkJ11bJ0dldFVzZXJFZmZlY3RpdmVQZXJtaXNzaW9ucyddWydMb3cnXSkKICAgICAgICAgICAgaGlnaCA9IGludChyZXNwb25zZS5qc29uKClbJ2QnXVsnR2V0VXNlckVmZmVjdGl2ZVBlcm1pc3Npb25zJ11bJ0hpZ2gnXSkKICAgICAgICAgICAgcGVybWlzc2lvbnMgPSAoaGlnaCA8PCAzMikgKyBsb3cKICAgICAgICAgICAgcmV0dXJuIHBlcm1pc3Npb25zCiAgICAgICAgZWxpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSA0MDE6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcigiVW5hdXRob3JpemVkOiAlcyIgJSByZXNwb25zZS50ZXh0KQoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBfdHJpbV91cmwodXJsKToKICAgICAgICByZXR1cm4gdXJsLnNwbGl0KCc6Ly8nKVsxXQoKICAgIGRlZiBfZW5zdXJlX3JlcXVlc3Qoc2VsZiwgdXJsKToKICAgICAgICByZXF1ZXN0ID0gc2VsZi5fc2Vzc2lvbi5nZXQodXJsLCB2ZXJpZnk9RmFsc2UpCiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0LnJlc3VsdCgpCiAgICAgICAgYXNzZXJ0IHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMCwgJ3N0YXR1cyBjb2RlIC0gJXMnICUgcmVzcG9uc2Uuc3RhdHVzX2NvZGUKICAgICAgICByZXR1cm4gcmVzcG9uc2UKCiAgICBkZWYgZ2V0X3JvbGVzKHNlbGYsIGdyb3VwX2ZpbHRlcj1Ob25lLCAqYXJncywgKiprd2FyZ3MpOgogICAgICAgIHRyeToKICAgICAgICAgICAgcmVzcG9uc2UgPSBzZWxmLl9lbnN1cmVfcmVxdWVzdChHUk9VUFNfVVJMLmZvcm1hdCh1cmw9c2VsZi51cmwpKQogICAgICAgICAgICBncm91cHMgPSBzZWxmLl9yZXN1bHRzKHJlc3BvbnNlKQogICAgICAgICAgICByZXR1cm4gW3sKICAgICAgICAgICAgICAgICJ1aWQiOiBpdGVtWyJJZCJdLAogICAgICAgICAgICAgICAgJ25hbWUnOiBzZWxmLl90cmltX3ByZWZpeChpdGVtWydMb2dpbk5hbWUnXSksCiAgICAgICAgICAgICAgICAnZGlzcGxheV9uYW1lJzogaXRlbVsnVGl0bGUnXSwKICAgICAgICAgICAgfSBmb3IgaXRlbSBpbiBncm91cHNdCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBsb2dnZXIuZXhjZXB0aW9uKGUpCiAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbignRXJyb3Igd2hpbGUgZ2V0dGluZyBncm91cCBsaXN0OiAlcycgJSBlKQoKICAgIGRlZiBnZXRfY2hpbGRyZW5fbm9kZXMoc2VsZiwgdXJsKToKICAgICAgICByZXR1cm4gW10KCiAgICBkZWYgZ2V0X21lbWJlcnNoaXBzKHNlbGYsICphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgcmVzdWx0ID0ge30KICAgICAgICB0cnk6CiAgICAgICAgICAgIHVzZXJzID0gc2VsZi5fZ2V0X3VzZXJzKCphcmdzLCAqKmt3YXJncykKICAgICAgICAgICAgZm9yIHVzZXIgaW4gdXNlcnM6CiAgICAgICAgICAgICAgICByZXN1bHQudXBkYXRlKHt1c2VyWydJZCddOiB7CiAgICAgICAgICAgICAgICAgICAgJ3VpZCc6IHVzZXJbJ0lkJ10sCiAgICAgICAgICAgICAgICAgICAgJ25hbWUnOiBzZWxmLl90cmltX3ByZWZpeCh1c2VyWydMb2dpbk5hbWUnXSksCiAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXlfbmFtZSc6IHVzZXJbJ1RpdGxlJ10sCiAgICAgICAgICAgICAgICAgICAgJ21lbWJlck9mJzogW3NlbGYuX3RyaW1fcHJlZml4KGdyb3VwWydJZCddKSBmb3IgZ3JvdXAgaW4gc2VsZi5fcmVzdWx0cyhzZWxmLl9lbnN1cmVfcmVxdWVzdCh1c2VyWydHcm91cHMnXVsnX19kZWZlcnJlZCddWyd1cmknXSkpXQogICAgICAgICAgICAgICAgfX0pCiAgICAgICAgICAgIHJldHVybiByZXN1bHQKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5leGNlcHRpb24oZSkKICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCdFcnJvciB3aGlsZSBnZXR0aW5nIG1lbWJlcnNoaXAgbGlzdDogJXMnICUgZSkKCiAgICBkZWYgZ2V0X3JvbGVzX21lbWJlcnNoaXAoc2VsZiwgdXBkYXRlX2NhY2hlPUZhbHNlKToKICAgICAgICBwYXNzCgogICAgZGVmIGdldF9tZW1iZXJzaGlwX2RldGFpbHMoc2VsZiwgc3ViamVjdF9rZXksICphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgcGFzcwoKICAgIGRlZiBnZXRfYWNlcyhzZWxmLCBob3N0LCBub2RlX3R5cGUsIHBhdGgpOgogICAgICAgIHBhc3MKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgX3RyaW1fcHJlZml4KHVzZXJuYW1lKToKICAgICAgICAjIGlmICd8JyBpbiB1c2VybmFtZToKICAgICAgICAjICAgICB1c2VybmFtZSA9IHVzZXJuYW1lLnNwbGl0KCd8JylbMV0KICAgICAgICByZXR1cm4gdXNlcm5hbWUKCiAgICBkZWYgX2dldF91c2VycyhzZWxmLCB1c2VyX2ZpbHRlcj1Ob25lLCAqYXJncywgKiprd2FyZ3MpOgogICAgICAgIHRyeToKICAgICAgICAgICAgcmVzcG9uc2UgPSBzZWxmLl9lbnN1cmVfcmVxdWVzdChVU0VSU19VUkwuZm9ybWF0KHVybD1zZWxmLnVybCkpCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZXN1bHRzKHJlc3BvbnNlKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbG9nZ2VyLmV4Y2VwdGlvbihlKQogICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oJ0Vycm9yIHdoaWxlIGdldHRpbmcgdXNlciBsaXN0OiAlcycgJSBlKQoKICAgIGRlZiBnZXRfdXNlcnMoc2VsZiwgdXNlcl9maWx0ZXI9Tm9uZSwgKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICByZXR1cm4gW3sKICAgICAgICAgICAgInVpZCI6IHNpeC50ZXh0X3R5cGUodXNlclsiSWQiXSksCiAgICAgICAgICAgICduYW1lJzogc2l4LnRleHRfdHlwZShzZWxmLl90cmltX3ByZWZpeCh1c2VyWydMb2dpbk5hbWUnXSkpLAogICAgICAgICAgICAnZGlzcGxheV9uYW1lJzogc2l4LnRleHRfdHlwZSh1c2VyWydUaXRsZSddKSwKICAgICAgICAgICAgJ21lbWJlck9mJzogW3NpeC50ZXh0X3R5cGUoc2VsZi5fdHJpbV9wcmVmaXgoZ3JvdXBbJ0lkJ10pKSBmb3IgZ3JvdXAgaW4gc2VsZi5fcmVzdWx0cyhzZWxmLl9lbnN1cmVfcmVxdWVzdCh1c2VyWydHcm91cHMnXVsnX19kZWZlcnJlZCddWyd1cmknXSkpXQogICAgICAgIH0gZm9yIHVzZXIgaW4gc2VsZi5fZ2V0X3VzZXJzKHVzZXJfZmlsdGVyLCAqYXJncywgKiprd2FyZ3MpXQoKICAgIGRlZiBfZ2V0X3N1YnNpdGVzKHNlbGYsIHVybCk6CiAgICAgICAgeWllbGQgdXJsCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXNwb25zZSA9IHNlbGYuX2Vuc3VyZV9yZXF1ZXN0KFNVQlNJVEVTX1VSTC5mb3JtYXQodXJsPXVybCkpCiAgICAgICAgICAgIHJlc3VsdHMgPSBzZWxmLl9yZXN1bHRzKHJlc3BvbnNlKQogICAgICAgICAgICBmb3Igbm9kZSBpbiByZXN1bHRzOgogICAgICAgICAgICAgICAgZm9yIHVybCBpbiBzZWxmLl9nZXRfc3Vic2l0ZXMobm9kZVsnVXJsJ10pOgogICAgICAgICAgICAgICAgICAgIHlpZWxkIHVybAoKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5leGNlcHRpb24oZSkKICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCdFcnJvciB3aGlsZSBnZXR0aW5nIHN1YnNpdGVzIGxpc3Q6ICVzOyBVUkw6ICVzJyAlIChlLCBTVUJTSVRFU19VUkwuZm9ybWF0KHVybD11cmwpKSkKCiAgICBkZWYgX2dldF9saXN0c19kZXRhaWxzKHNlbGYsIHN1YnNpdGVfdXJsKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJlcXVlc3QgPSBzZWxmLl9lbnN1cmVfcmVxdWVzdChMSVNUU19VUkwuZm9ybWF0KHVybD1zdWJzaXRlX3VybCkpCiAgICAgICAgICAgIHJlc3VsdHMgPSBzZWxmLl9yZXN1bHRzKHJlcXVlc3QpCiAgICAgICAgICAgIHJldHVybiBbKHNpeC50ZXh0X3R5cGUocmVzdWx0WydJZCddKSwgc2l4LnRleHRfdHlwZShyZXN1bHRbJ1RpdGxlJ10pKSBmb3IgcmVzdWx0IGluIHJlc3VsdHNdCgogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbG9nZ2VyLmV4Y2VwdGlvbihlKQogICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oJ0Vycm9yIHdoaWxlIGdldHRpbmcgbGlzdHMgbGlzdDogJXMnICUgZSkKCiAgICBkZWYgX2xpc3RfcGVybWlzc2lvbl9hcmdzX2dlbmVyYXRvcihzZWxmKToKICAgICAgICBmb3Igc3Vic2l0ZSBpbiBzZWxmLl9nZXRfc3Vic2l0ZXMoc2VsZi51cmwpOgogICAgICAgICAgICBsaXN0X2lkcyA9IHNlbGYuX2dldF9saXN0c19kZXRhaWxzKHN1YnNpdGUpCiAgICAgICAgICAgIGZvciB1c2VyIGluIHNlbGYuZ2V0X3VzZXJzKCk6CiAgICAgICAgICAgICAgICBmb3IgZ3VpZCwgdGl0bGUgaW4gbGlzdF9pZHM6CiAgICAgICAgICAgICAgICAgICAgeWllbGQgeyd1cmwnOiBzdWJzaXRlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAnZ3VpZCc6IHNpeC50ZXh0X3R5cGUoZ3VpZCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICdsb2dpbic6IHNpeC50ZXh0X3R5cGUodXNlclsnbmFtZSddKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlJzogdGl0bGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICd1aWQnOiBzaXgudGV4dF90eXBlKHVzZXJbJ3VpZCddKX0KCiAgICBkZWYgX3N1YnNpdGVfcGVybWlzc2lvbl9hcmdzX2dlbmVyYXRvcihzZWxmKToKICAgICAgICBmb3Igc3Vic2l0ZSBpbiBzZWxmLl9nZXRfc3Vic2l0ZXMoc2VsZi51cmwpOgogICAgICAgICAgICBmb3IgdXNlciBpbiBzZWxmLmdldF91c2VycygpOgogICAgICAgICAgICAgICAgeWllbGQgeyd1cmwnOiBzdWJzaXRlLCAnbG9naW4nOiBzaXgudGV4dF90eXBlKHVzZXJbJ25hbWUnXSksICd1aWQnOiBzaXgudGV4dF90eXBlKHVzZXJbJ3VpZCddKX0KCiAgICBkZWYgX2xpc3RfcGVybWlzc2lvbl9yZXF1ZXN0c19nZW5lcmF0b3Ioc2VsZik6CiAgICAgICAgZm9yIGFyZ3MgaW4gc2VsZi5fbGlzdF9wZXJtaXNzaW9uX2FyZ3NfZ2VuZXJhdG9yKCk6CiAgICAgICAgICAgIHlpZWxkIHNlbGYuX3Nlc3Npb24uZ2V0KExJU1RfUEVSTUlTU0lPTlNfVVJMLmZvcm1hdChsb2dpbj11cmxsaWIucXVvdGVfcGx1cyhhcmdzWydsb2dpbiddKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybD1hcmdzWyd1cmwnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGd1aWQ9YXJncy5wb3AoJ2d1aWQnKSksIHZlcmlmeT1GYWxzZSksIGFyZ3MKCiAgICBkZWYgX3N1YnNpdGVfcGVybWlzc2lvbl9yZXF1ZXN0c19nZW5lcmF0b3Ioc2VsZik6CiAgICAgICAgZm9yIGFyZ3MgaW4gc2VsZi5fc3Vic2l0ZV9wZXJtaXNzaW9uX2FyZ3NfZ2VuZXJhdG9yKCk6CiAgICAgICAgICAgIHlpZWxkIHNlbGYuX3Nlc3Npb24uZ2V0KFNVQlNJVEVfUEVSTUlTU0lPTlNfVVJMLmZvcm1hdChsb2dpbj11cmxsaWIucXVvdGVfcGx1cyhhcmdzWydsb2dpbiddKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybD1hcmdzWyd1cmwnXSksIHZlcmlmeT1GYWxzZSksIGFyZ3MKCiAgICBkZWYgX2xpc3RfcGVybWlzc2lvbl9yZXNwb25zZXNfZ2VuZXJhdG9yKHNlbGYpOgogICAgICAgIGZvciByZXF1ZXN0LCBhcmdzIGluIHNlbGYuX2xpc3RfcGVybWlzc2lvbl9yZXF1ZXN0c19nZW5lcmF0b3IoKToKICAgICAgICAgICAgeWllbGQgcmVxdWVzdC5yZXN1bHQoKSwgYXJncwoKICAgIGRlZiBfc3Vic2l0ZV9wZXJtaXNzaW9uX3Jlc3BvbnNlc19nZW5lcmF0b3Ioc2VsZik6CiAgICAgICAgZm9yIHJlcXVlc3QsIGFyZ3MgaW4gc2VsZi5fc3Vic2l0ZV9wZXJtaXNzaW9uX3JlcXVlc3RzX2dlbmVyYXRvcigpOgogICAgICAgICAgICB5aWVsZCByZXF1ZXN0LnJlc3VsdCgpLCBhcmdzCgogICAgZGVmIF9nZXRfbGlzdF9wZXJtaXNzaW9ucyhzZWxmKToKICAgICAgICBmb3IgcmVzcG9uc2UsIGFyZ3MgaW4gc2VsZi5fbGlzdF9wZXJtaXNzaW9uX3Jlc3BvbnNlc19nZW5lcmF0b3IoKToKICAgICAgICAgICAgcGVybWlzc2lvbnMgPSBzZWxmLl9nZXRfcGVybWlzc2lvbnMocmVzcG9uc2UpCiAgICAgICAgICAgIGlmIHBlcm1pc3Npb25zOgogICAgICAgICAgICAgICAgeWllbGQgewogICAgICAgICAgICAgICAgICAgICdvYmonOiBzaXgudGV4dF90eXBlKCJ7fTo6e30iLmZvcm1hdChzZWxmLl90cmltX3VybChhcmdzWyd1cmwnXSksIGFyZ3NbJ3RpdGxlJ10uZW5jb2RlKCdjcDEyNTEnKSkpLAogICAgICAgICAgICAgICAgICAgICdzdWJqX2lkJzogc2l4LnRleHRfdHlwZShhcmdzWyd1aWQnXSksCiAgICAgICAgICAgICAgICAgICAgJ2xvZ2luJzogc2l4LnRleHRfdHlwZShhcmdzWydsb2dpbiddKSwKICAgICAgICAgICAgICAgICAgICAncGVybWlzc2lvbnMnOiBwZXJtaXNzaW9ucywKICAgICAgICAgICAgICAgICAgICAnYWNlX3R5cGUnOiAnbGlzdCcsCiAgICAgICAgICAgICAgICB9CgogICAgZGVmIF9nZXRfc3Vic2l0ZV9wZXJtaXNzaW9ucyhzZWxmKToKICAgICAgICBmb3IgcmVzcG9uc2UsIGFyZ3MgaW4gc2VsZi5fc3Vic2l0ZV9wZXJtaXNzaW9uX3Jlc3BvbnNlc19nZW5lcmF0b3IoKToKICAgICAgICAgICAgcGVybWlzc2lvbnMgPSBzZWxmLl9nZXRfcGVybWlzc2lvbnMocmVzcG9uc2UpCiAgICAgICAgICAgIGlmIHBlcm1pc3Npb25zOgogICAgICAgICAgICAgICAgeWllbGQgewogICAgICAgICAgICAgICAgICAgICdvYmonOiBzaXgudGV4dF90eXBlKHNlbGYuX3RyaW1fdXJsKGFyZ3NbJ3VybCddKSksCiAgICAgICAgICAgICAgICAgICAgJ3N1YmpfaWQnOiBzaXgudGV4dF90eXBlKGFyZ3NbJ3VpZCddKSwKICAgICAgICAgICAgICAgICAgICAnbG9naW4nOiBzaXgudGV4dF90eXBlKGFyZ3NbJ2xvZ2luJ10pLAogICAgICAgICAgICAgICAgICAgICdwZXJtaXNzaW9ucyc6IHBlcm1pc3Npb25zLAogICAgICAgICAgICAgICAgICAgICdhY2VfdHlwZSc6ICdzdWJzaXRlJywKICAgICAgICAgICAgICAgIH0KCiAgICBkZWYgZ2V0X2FjZXNfcmVjdXJzaXZlKHNlbGYsIGhvc3QsIHJlbCwgcGF0aCwgY2I9Tm9uZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBzdGFydCA9IG5vdygpCiAgICAgICAgICAgIGFjZXMgPSBpdGVydG9vbHMuY2hhaW4oc2VsZi5fZ2V0X2xpc3RfcGVybWlzc2lvbnMoKSwgc2VsZi5fZ2V0X3N1YnNpdGVfcGVybWlzc2lvbnMoKSkKICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ1Rvb2sgdGltZTogJXMnICUgKG5vdygpIC0gc3RhcnQpKQogICAgICAgICAgICByZXR1cm4gYWNlcwogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbG9nZ2VyLmV4Y2VwdGlvbihlKQogICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oJ0Vycm9yIHdoaWxlIGdldHRpbmcgYWNlcyBsaXN0OiAlcycgJSBlKQoKICAgIGRlZiBnZXRfZGlzcGxheV9uYW1lKHNlbGYsIHN1YmplY3Rfa2V5LCAqYXJncywgKiprd2FyZ3MpOgogICAgICAgIHJldHVybiBOb25lCgogICAgZGVmIHRlc3Qoc2VsZik6CiAgICAgICAgc2VsZi5jb25uZWN0KCkKICAgICAgICBzZWxmLmRpc2Nvbm5lY3QoKQogICAgICAgIHJldHVybiBUcnVlCm9ucyhzZWxmKToKICAgICAgICBmb3IgcmVzcG9uc2UsIGFyZ3MgaW4gc2VsZi5fbGlzdF9wZXJtaXNzaW9uX3Jlc3BvbnNlc19nZW5lcmF0b3IoKToKICAgICAgICAgICAgcGVybWlzc2lvbnMgPSBzZWxmLl9nZXRfcGVybWlzc2lvbnMocmVzcG9uc2UpCiAgICAgICAgICAgIGlmIHBlcm1pc3Npb25zOgogICAgICAgICAgICAgICAgeWllbGQgewogICAgICAgICAgICAgICAgICAgICdvYmonOiBzaXgudGV4dF90eXBlKCJ7fTo6e30iLmZvcm1hdChzZWxmLl90cmltX3VybChhcmdzWyd1cmwnXSksIGFyZ3NbJ3RpdGxlJ10uZW5jb2RlKCdjcDEyNTEnKSkpLAogICAgICAgICAgICAgICAgICAgICdzdWJqX2lkJzogc2l4LnRleHRfdHlwZShhcmdzWyd1aWQnXSksCiAgICAgICAgICAgICAgICAgICAgJ2xvZ2luJzogc2l4LnRleHRfdHlwZShhcmdzWydsb2dpbiddKSwKICAgICAgICAgICAgICAgICAgICAncGVybWlzc2lvbnMnOiBwZXJtaXNzaW9ucywKICAgICAgICAgICAgICAgICAgICAnYWNlX3R5cGUnOiAnbGlzdCcsCiAgICAgICAgICAgICAgICB9CgogICAgZGVmIF9nZXRfc3Vic2l0ZV9wZXJtaXNzaW9ucyhzZWxmKToKICAgICAgICBmb3IgcmVzcG9uc2UsIGFyZ3MgaW4gc2VsZi5fc3Vic2l0ZV9wZXJtaXNzaW9uX3Jlc3BvbnNlc19nZW5lcmF0b3IoKToKICAgICAgICAgICAgcGVybWlzc2lvbnMgPSBzZWxmLl9nZXRfcGVybWlzc2lvbnMocmVzcG9uc2UpCiAgICAgICAgICAgIGlmIHBlcm1pc3Npb25zOgogICAgICAgICAgICAgICAgeWllbGQgewogICAgICAgICAgICAgICAgICAgICdvYmonOiBzaXgudGV4dF90eXBlKHNlbGYuX3RyaW1fdXJsKGFyZ3NbJ3VybCddKSksCiAgICAgICAgICAgICAgICAgICAgJ3N1YmpfaWQnOiBzaXgudGV4dF90eXBlKGFyZ3NbJ3VpZCddKSwKICAgICAgICAgICAgICAgICAgICAnbG9naW4nOiBzaXgudGV4dF90eXBlKGFyZ3NbJ2xvZ2luJ10pLAogICAgICAgICAgICAgICAgICAgICdwZXJtaXNzaW9ucyc6IHBlcm1pc3Npb25zLAogICAgICAgICAgICAgICAgICAgICdhY2VfdHlwZSc6ICdzdWJzaXRlJywKICAgICAgICAgICAgICAgIH0KCiAgICBkZWYgZ2V0X2FjZXNfcmVjdXJzaXZlKHNlbGYsIGhvc3QsIHJlbCwgcGF0aCwgY2I9Tm9uZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBzdGFydCA9IG5vdygpCiAgICAgICAgICAgIGFjZXMgPSBpdGVydG9vbHMuY2hhaW4oc2VsZi5fZ2V0X2xpc3RfcGVybWlzc2lvbnMoKSwgc2VsZi5fZ2V0X3N1YnNpdGVfcGVybWlzc2lvbnMoKSkKICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ1Rvb2sgdGltZTogJXMnICUgKG5vdygpIC0gc3RhcnQpKQogICAgICAgICAgICByZXR1cm4gYWNlcwogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbG9nZ2VyLmV4Y2VwdGlvbihlKQogICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oJ0Vycm9yIHdoaWxlIGdldHRpbmcgYWNlcyBsaXN0OiAlcycgJSBlKQoKICAgIGRlZiBnZXRfZGlzcGxheV9uYW1lKHNlbGYsIHN1YmplY3Rfa2V5LCAqYXJncywgKiprd2FyZ3MpOgogICAgICAgIHJldHVybiBOb25lCgogICAgZGVmIHRlc3Qoc2VsZik6CiAgICAgICAgc2VsZi5jb25uZWN0KCkKICAgICAgICBzZWxmLmRpc2Nvbm5lY3QoKQogICAgICAgIHJldHVybiBUcnVlCg==</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICAgIF9fY29sbGVjdGlvbl9fID0gJ3JvdXRlcycK</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="8" type="4">
        <text encoding="base64">ICAgICMgICdmb3JtYXQnOiAnanBnJywKICAgICMgICdoZWlnaHQnOiAxMjAwLAogICAgIyAgJ29yaWdpbmFsX2ZpbGVuYW1lJzogJ3dhbGxwYXBlci00NTE1MzUnLAogICAgIyAgJ3BsYWNlaG9sZGVyJzogRmFsc2UsCiAgICAjICAncHVibGljX2lkJzogJ3dsYjd0YmEwY3d4eGhxYnBieGhnJywKICAgICMgICdyZXNvdXJjZV90eXBlJzogJ3JvdXRlJywKICAgICMgICdzZWN1cmVfdXJsJzogJ2h0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RpYjFqeWNyaS9pbWFnZS91cGxvYWQgXAogICAgIyAgL3YxNTEzMjg1ODMzL3dsYjd0YmEwY3d4eGhxYnBieGhnLmpwZycsCiAgICAjICAnc2lnbmF0dXJlJzogJzkyMDJkZWQ1NDQ1NDc2ODZjODhlZmQ3YjYxNzUxYzc0M2M4MjA4MTMnLAogICAgIyAgJ3RhZ3MnOiBbXSwKICAgICMgICd0eXBlJzogJ3VwbG9hZCcsCiAgICAjICAndXJsJzogJ2h0dHA6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGliMWp5Y3JpL2ltYWdlL3VwbG9hZC92MTUxMzI4NTgzMwogICAgIyAvXHdsYjd0YmEwY3d4eGhxYnBieGhnLmpwZycsCiAgICAjICAndmVyc2lvbic6IDE1MTMyODU4MzMsCiAgICAjICAnd2lkdGgnOiAxOTIwfQ==</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">aW1wb3J0IGFzeW5jaW8KaW1wb3J0IHJlCgppbXBvcnQgY2xvdWRpbmFyeS51cGxvYWRlcgppbXBvcnQgdG9ybmFkbwpmcm9tIG1vdG9yLm1vdG9yX2FzeW5jaW8gaW1wb3J0IEFzeW5jSU9Nb3RvckNsaWVudApmcm9tIHRvcm5hZG8ud2ViIGltcG9ydCBBcHBsaWNhdGlvbgpmcm9tIHVtb25nbyBpbXBvcnQgTW90b3JBc3luY0lPSW5zdGFuY2UKZnJvbSB1bW9uZ28uZG9jdW1lbnQgaW1wb3J0IE1ldGFEb2N1bWVudEltcGxlbWVudGF0aW9uCmZyb20gdW1vbmdvLnRlbXBsYXRlIGltcG9ydCBNZXRhVGVtcGxhdGUKCmltcG9ydCBzZXR0aW5ncwpmcm9tIHNlcnZpY2UgaW1wb3J0IFVwbG9hZGVyCmZyb20gdXRpbHMgaW1wb3J0IFJvdXRlcnMKCgpjbGFzcyBXbGlJbWFnZXNBcHBsaWNhdGlvbihBcHBsaWNhdGlvbik6CiAgICBkYiA9IEFzeW5jSU9Nb3RvckNsaWVudCgpLndsaQogICAgZGJfaW5zdGFuY2UgPSBNb3RvckFzeW5jSU9JbnN0YW5jZSgpCiAgICBkYl9pbnN0YW5jZS5pbml0KGRiKQoKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBjbG91ZGluYXJ5LmNvbmZpZygKICAgICAgICAgICAgKipzZXR0aW5ncy5DTE9VRElOQVJZCiAgICAgICAgKQogICAgICAgIHNlbGYudXBsb2FkZXIgPSBVcGxvYWRlcigpCiAgICAgICAgc2VsZi5yZWdpc3Rlcl9tb2RlbHMoKQogICAgICAgIGhhZGxlcnMgPSBzZWxmLnJlZ2lzdGVyX2hhbmRsZXJzKCkKICAgICAgICBzdXBlcihXbGlJbWFnZXNBcHBsaWNhdGlvbiwgc2VsZikuX19pbml0X18oaGFkbGVycykKCiAgICBkZWYgcmVnaXN0ZXJfbW9kZWxzKHNlbGYpOgogICAgICAgIGZvciBhcHBfcGF0aCBpbiBzZXR0aW5ncy5BUFBTOgogICAgICAgICAgICBfX2ltcG9ydF9fKGFwcF9wYXRoLCBnbG9iYWxzKCksIGxvY2FscygpLCBbJ21vZGVscyddKQoKICAgIGRlZiByZWdpc3Rlcl9oYW5kbGVycyhzZWxmKToKICAgICAgICBmb3IgYXBwX3BhdGggaW4gc2V0dGluZ3MuQVBQUzoKICAgICAgICAgICAgX19pbXBvcnRfXyhhcHBfcGF0aCwgZ2xvYmFscygpLCBsb2NhbHMoKSwgWydoYW5kbGVycyddKQogICAgICAgIHJldHVybiBSb3V0ZXJzLmdldF9yb3V0ZXJzKCkKCgpjbGFzcyBNZXRhQmFzZU1vZGVsKHR5cGUpOgogICAgZGVmIF9fbmV3X18oY2xzLCBuYW1lLCBiYXNlcywgYXR0cnM6IGRpY3QsICoqa3dhcmdzKToKICAgICAgICBrbGFzcyA9IHN1cGVyKCkuX19uZXdfXyhjbHMsIG5hbWUsIGJhc2VzLCBhdHRycywgKiprd2FyZ3MpCiAgICAgICAgZGJfaW5zdGFuY2UgPSBjbHMuZGJfaW5zdGFuY2UoKQogICAgICAgIGtsYXNzID0gZGJfaW5zdGFuY2UucmVnaXN0ZXIoa2xhc3MpCiAgICAgICAgcmV0dXJuIGtsYXNzCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIGRiKCk6CiAgICAgICAgcmV0dXJuIFdsaUltYWdlc0FwcGxpY2F0aW9uLmRiCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIGRiX2luc3RhbmNlKCk6CiAgICAgICAgcmV0dXJuIFdsaUltYWdlc0FwcGxpY2F0aW9uLmRiX2luc3RhbmNlCgogICAgQHByb3BlcnR5CiAgICBkZWYgdXBsb2FkZXIoY2xzKToKICAgICAgICByZXR1cm4gV2xpSW1hZ2VzQXBwbGljYXRpb24udXBsb2FkZXIKCgpjbGFzcyBNZXRhQmFzZVRlbXBsYXRlKE1ldGFCYXNlTW9kZWwsIE1ldGFUZW1wbGF0ZSk6CiAgICBjbGFzcyBNZXRhOgogICAgICAgIHBhc3MKCgpkZWYgbWFpbigpOgogICAgcmV0dXJuIFdsaUltYWdlc0FwcGxpY2F0aW9uKCkKCgphc3luYyBkZWYgY3JlYXRlX2luZGV4KCk6CiAgICBmb3IgYXBwX3BhdGggaW4gc2V0dGluZ3MuQVBQUzoKICAgICAgICBtb2RlbHMgPSBfX2ltcG9ydF9fKGFwcF9wYXRoLCBnbG9iYWxzKCksIGxvY2FscygpLCBbJ21vZGVscyddKS5tb2RlbHMKCiAgICAgICAgZm9yIG5hbWUgaW4gKG0gZm9yIG0gaW4gZGlyKG1vZGVscykgaWYgcmUubWF0Y2gocidbQS1aXScsIG0pKToKICAgICAgICAgICAgbW9kZWwgPSBnZXRhdHRyKG1vZGVscywgbmFtZSkKCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UobW9kZWwsIE1ldGFEb2N1bWVudEltcGxlbWVudGF0aW9uKSBhbmQgXAogICAgICAgICAgICAgICAgICAgIG5vdCBoYXNhdHRyKG1vZGVsLCAnX19lbWJlZGRlZF9fJyk6CiAgICAgICAgICAgICAgICBhd2FpdCBtb2RlbC5lbnN1cmVfaW5kZXhlcygpCgoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIGFwcCA9IG1haW4oKQogICAgdG9ybmFkby5wbGF0Zm9ybS5hc3luY2lvLkFzeW5jSU9NYWluTG9vcCgpLmluc3RhbGwoKQogICAgYXBwLmxpc3RlbigzMDAxKQogICAgYXN5bmNpby5nZXRfZXZlbnRfbG9vcCgpLnJ1bl91bnRpbF9jb21wbGV0ZShjcmVhdGVfaW5kZXgoKSkKICAgIGFzeW5jaW8uZ2V0X2V2ZW50X2xvb3AoKS5ydW5fZm9yZXZlcigpCg==</text>
      </register>
      <register name=":" type="4">
        <text>w</text>
      </register>
    </registers>
    <search>
      <last-search>request, args in self._list_permission_requests_generator():</last-search>
      <last-offset />
      <last-pattern>request, args in self._list_permission_requests_generator():</last-pattern>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry>unicode</entry>
        <entry>quote_plus</entry>
        <entry>sub</entry>
        <entry>request, args in self._list_permission_requests_generator():</entry>
      </history-search>
      <history-cmd>
        <entry>w</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>